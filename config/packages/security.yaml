security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: username
  firewalls:
    # Need to be set before the main firewall because file is read from top to bottom
    main:
      # To check user credentials, we use the app_user_provider
      provider: app_user_provider
      # Similar to rate limit for auth
      login_throttling:
        max_attempts: 3
        interval: "15 minutes"
      # The auth logic to authenticate the user
      json_login:
                # api_login is a route we will create below
                check_path: api_login

      custom_authenticator: App\Security\LoginFormAuthenticator
      # The entry point is the route that the user will be redirected to
      # if they try to access a protected page without being authenticated
      entry_point: form_login
      # Type of authentication
      form_login:
        # "app_login" is the route used for authentication
        login_path: app_login
        check_path: app_login
      # Possibility to logout
      logout:
        # "app_logout" is the route used for logout
        path: app_logout
        # where to redirect after logout
        target: app_login
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true
  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
